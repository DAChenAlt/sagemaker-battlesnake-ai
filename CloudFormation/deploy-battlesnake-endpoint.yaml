AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: "(SA0001) - sagemaker-battlesnake-ai: Solution for training and deploying a Battlesnake AI using Amazon SageMaker. Version 1"
Mappings: 
  RegionMap:
    ap-northeast-2:
      "MxnetLayerArn": "arn:aws:lambda:ap-northeast-2:752200179490:layer:AWSLambda-Python37-MXNet:1"
      "SciPyLayerArn": "arn:aws:lambda:ap-northeast-2:296580773974:layer:AWSLambda-Python37-SciPy1x:2"
    ap-southeast-2:
      "MxnetLayerArn": "arn:aws:lambda:ap-southeast-2:752200179490:layer:AWSLambda-Python37-MXNet:1"
      "SciPyLayerArn": "arn:aws:lambda:ap-southeast-2:817496625479:layer:AWSLambda-Python37-SciPy1x:2"
    sa-east-1:
      "MxnetLayerArn": "arn:aws:lambda:sa-east-1:752200179490:layer:AWSLambda-Python37-MXNet:1"
      "SciPyLayerArn": "arn:aws:lambda:sa-east-1:640010853179:layer:AWSLambda-Python37-SciPy1x:2"
    eu-west-1:
      "MxnetLayerArn": "arn:aws:lambda:eu-west-1:752200179490:layer:AWSLambda-Python37-MXNet:1"
      "SciPyLayerArn": "arn:aws:lambda:eu-west-1:399891621064:layer:AWSLambda-Python37-SciPy1x:2"
    eu-west-3:
      "MxnetLayerArn": "arn:aws:lambda:eu-west-3:752200179490:layer:AWSLambda-Python37-MXNet:1"
      "SciPyLayerArn": "arn:aws:lambda:eu-west-3:959311844005:layer:AWSLambda-Python37-SciPy1x:2"
    us-east-1:
      "MxnetLayerArn": "arn:aws:lambda:us-east-1:752200179490:layer:AWSLambda-Python37-MXNet:1"
      "SciPyLayerArn": "arn:aws:lambda:us-east-1:668099181075:layer:AWSLambda-Python37-SciPy1x:2"
    us-west-2:
      "MxnetLayerArn": "arn:aws:lambda:us-west-2:752200179490:layer:AWSLambda-Python37-MXNet:1"
      "SciPyLayerArn": "arn:aws:lambda:us-west-2:420165488524:layer:AWSLambda-Python37-SciPy1x:2"
    ca-central-1:
      "MxnetLayerArn": "arn:aws:lambda:ca-central-1:752200179490:layer:AWSLambda-Python37-MXNet:1"
      "SciPyLayerArn": "arn:aws:lambda:ca-central-1:778625758767:layer:AWSLambda-Python37-SciPy1x:2"
Parameters:
  SnakeColor:
    Description: "Hexa RVB color of the snake"
    Default: "#128a7a"
    Type: String
  SnakeHead:
    Description: "Snake head : evil, fang, pixel, safe, ... (see: https://docs.battlesnake.com/snake-customization)"
    Default: bendr
    Type: String
  SnakeTail:
    Description: "Snake tail : sharp, pixel, bolt, curled, ... (see: https://docs.battlesnake.com/snake-customization)"
    Default: freckled
    Type: String
  SagemakerInstanceType:
    Description: "Instance type used for the inference endpoint and training. t2 is default because it works on all accounts, you can choose m5 or m4 which are in the AWS free tier if your account support it"
    Default: ml.t2.medium
    Type: String
    AllowedValues:
      - ml.t2.medium
      - ml.m5.xlarge
      - ml.m4.xlarge
Conditions:
  ShouldUpdateInstanceType:
    !Not
      - !Equals [ml.t2.medium, !Ref SagemakerInstanceType]
Resources:
  BattleSnakeDeployFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 900
      Handler: lambda.handler
      Role: !GetAtt LambdaEndpointRole.Arn
      Environment:
        Variables:
          SAGEMAKER_BUCKET_NAME: !Sub "sagemaker-${AWS::Region}-${AWS::AccountId}"
      Runtime: python3.7
      MemorySize: 512
      CodeUri:
        Bucket: !Sub "battlesnake-aws-${AWS::Region}"
        Key: lambda/deployment-lambda-package.zip
  CleanupBucketOnDelete:
     Type: Custom::CleanupBucket
     Properties:
       ServiceToken: !GetAtt BattleSnakeDeployFunction.Arn
       Operation: CleanupSagemakerBucket
  NotebookInstanceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  NotebookInstanceIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: battlesnake-notebook-instance-policy
      Roles:
        - !Ref NotebookInstanceExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sagemaker:CreateTrainingJob
          - sagemaker:DescribeTrainingJob
          - sagemaker:CreateModel
          - sagemaker:DescribeModel
          - sagemaker:DeleteModel
          - sagemaker:DescribeTransformJob
          - sagemaker:CreateTransformJob
          - sagemaker:DescribeEndpointConfig
          - sagemaker:CreateEndpointConfig
          - sagemaker:CreateEndpoint
          - sagemaker:DescribeEndpoint
          Resource:
          - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:*"
        - Effect: Allow
          Action:
          - ecr:GetAuthorizationToken
          - ecr:GetDownloadUrlForLayer
          - ecr:BatchGetImage
          - ecr:BatchCheckLayerAvailability
          Resource:
          - "*"
          - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*"
        - Effect: Allow
          Action:
          - ec2:CreateVpcEndpoint
          - ec2:DescribeRouteTables
          Resource: "*"
        - Effect: Allow
          Action:
          - cloudwatch:PutMetricData
          - cloudwatch:GetMetricData
          - cloudwatch:GetMetricStatistics
          - cloudwatch:ListMetrics
          Resource:
          - !Sub "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:*"
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogStreams
          - logs:GetLogEvents
          - logs:PutLogEvents
          Resource:
          - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/sagemaker/*"
        - Effect: Allow
          Action:
          - iam:PassRole
          Resource:
          - !GetAtt NotebookInstanceExecutionRole.Arn
          Condition:
            StringEquals:
              iam:PassedToService: sagemaker.amazonaws.com
        - Effect: Allow
          Action:
          - iam:GetRole
          Resource:
          - !GetAtt NotebookInstanceExecutionRole.Arn
        - Effect: Allow
          Action:
          - s3:CreateBucket
          Resource:
          - "*"
        - Effect: Allow
          Action:
          - s3:ListBucket
          - s3:GetObject
          - s3:PutObject
          - s3:DeleteObject
          Resource:
          - !Sub "arn:aws:s3:::sagemaker-${AWS::Region}-${AWS::AccountId}"
          - !Sub "arn:aws:s3:::sagemaker-${AWS::Region}-${AWS::AccountId}/*"
  NotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      DirectInternetAccess: Enabled
      InstanceType: ml.t3.medium
      LifecycleConfigName: !GetAtt LifeCycleConfig.NotebookInstanceLifecycleConfigName
      NotebookInstanceName: BattleSnakeNotebook
      RoleArn: !GetAtt NotebookInstanceExecutionRole.Arn
      VolumeSizeInGB: 25
  LifeCycleConfig:
    Type: AWS::SageMaker::NotebookInstanceLifecycleConfig
    Properties: 
      OnStart:
        - Content:
            Fn::Base64:
              !Join
              - ";"
              - - cd /home/ec2-user/SageMaker
                - git clone --depth=1  https://github.com/JohnyFicient/randomproject.git battlesnake
                - chown -R ec2-user:ec2-user battlesnake
                - cd battlesnake
                - rm -rf .git
                - Fn::If:
                  - ShouldUpdateInstanceType
                  - !Sub "sed -i 's/ml.t2.medium/${SagemakerInstanceType}/g' InferenceEndpoint/deployEndpoint.ipynb"
                  - "ls"
                - Fn::If:
                  - ShouldUpdateInstanceType
                  - !Sub "sed -i 's/ml.t2.medium/${SagemakerInstanceType}/g' TrainingEnvironment/notebooks/HeuristicsDeveloper.ipynb"
                  - "ls"
                - Fn::If:
                  - ShouldUpdateInstanceType
                  - !Sub "sed -i 's/ml.t2.medium/${SagemakerInstanceType}/g' TrainingEnvironment/notebooks/SagemakerModelTraining.ipynb"
                  - "ls"
                - /bin/bash CloudFormation/on-start.sh
  LambdaDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SagemakerBucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              Resource:
              - !Sub "arn:aws:s3:::sagemaker-${AWS::Region}-${AWS::AccountId}/*"
              - !Sub "arn:aws:s3:::sagemaker-${AWS::Region}-${AWS::AccountId}"
  LambdaEndpointRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: InvokeSagemakerEndpoint
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - sagemaker:InvokeEndpoint
              Resource: "*"
  BattleSnakeAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Properties:
            Method: ANY
            Path: "/{proxy+}"
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      Handler: lambda.proxyHandler
      Role: !GetAtt LambdaEndpointRole.Arn
      Environment:
        Variables:
          SNAKE_COLOR: !Ref SnakeColor
          SNAKE_HEAD: !Ref SnakeHead
          SNAKE_TAIL: !Ref SnakeTail
      Runtime: python3.7
      MemorySize: 1024
      Layers:
        - !FindInMap [RegionMap, !Ref "AWS::Region", MxnetLayerArn]
        - !FindInMap [RegionMap, !Ref "AWS::Region", SciPyLayerArn]
      CodeUri:
        Bucket: !Sub "battlesnake-aws-${AWS::Region}"
        Key: lambda/model-lambda-package.zip
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: snake
Outputs:
  TrainingEnvironement:
    Description: "Training Notebook"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/sagemaker/home?region=${AWS::Region}#/notebook-instances/openNotebook/BattleSnakeNotebook?view=lab"
  SnakeEndpoint:
    Description: "Snake API endpoint URL"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/snake/"
  StartMethod:
    Description: "Start method URL"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/snake/start"


            
